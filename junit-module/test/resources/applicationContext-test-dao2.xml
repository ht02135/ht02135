<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://www.springframework.org/schema/jee 
             http://www.springframework.org/schema/jee/spring-jee-2.0.xsd
        http://www.springframework.org/schema/util 
             http://www.springframework.org/schema/util/spring-util-2.0.xsd
        http://www.springframework.org/schema/aop 
             http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
        http://www.springframework.org/schema/tx 
             http://www.springframework.org/schema/tx/spring-tx-2.0.xsd"
    default-lazy-init="true">
    
    <!-- ////////// Database Connection and Transaction ////////// -->
    
    <!--  Loads externalized configuration details from mysql.properties  -->
    <!-- 
    <bean id="mySQLProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="location" value="classpath:/mysql.properties" />
    </bean>
    -->
    <bean id="oracleProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="location" value="classpath:/oracle2.properties" />
    </bean>
  
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
    </bean> 

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="annotatedClasses">
            <list>
                <value>com.hung.auction.domain.Address</value>
                <value>com.hung.auction.domain.User</value>
                <value>com.hung.auction.domain.Seller</value>
                <value>com.hung.auction.domain.Bidder</value>
                <value>com.hung.auction.domain.Bid</value>
                <value>com.hung.auction.domain.Item</value>
                <value>com.hung.auction.domain.DomainUser</value>
                <value>com.hung.auction.domain.Domain</value>
                <value>com.hung.auction.domain.StringDomainSetting</value>
                <value>com.hung.auction.domain.BooleanDomainSetting</value>
                <value>com.hung.auction.domain.IntegerDomainSetting</value>
                <value>com.hung.auction.domain.ClientCache</value>
                <value>com.hung.auction.domain.ClientCacheId</value>
                <value>com.hung.auction.domain.AbstractDocument</value>
                <value>com.hung.auction.domain.BinaryDocument</value>
                <value>com.hung.auction.domain.StringDocument</value>
                <value>com.hung.auction.domain.Term</value>
                <value>com.hung.auction.domain.TermDocumentIndex</value>
                <value>com.hung.auction.domain.AbstractIndexRequest</value>
                <value>com.hung.auction.domain.TermIndexRequest</value>
                <value>com.hung.auction.domain.DocumentIndexRequest</value>

                <value>com.hung.auction.domain2.ImplicitPolymorphicAnimal</value>
                <value>com.hung.auction.domain2.ImplicitPolymorphicCat</value>
                <value>com.hung.auction.domain2.ImplicitPolymorphicDog</value>
                <value>com.hung.auction.domain2.JoinedAnimal</value>
                <value>com.hung.auction.domain2.JoinedCat</value>
                <value>com.hung.auction.domain2.JoinedDog</value>
                <value>com.hung.auction.domain2.SingleTableAnimal</value>
                <value>com.hung.auction.domain2.SingleTableCat</value>
                <value>com.hung.auction.domain2.SingleTableDog</value>
                <value>com.hung.auction.domain2.TablePerClassAnimal</value>
                <value>com.hung.auction.domain2.TablePerClassCat</value>
                <value>com.hung.auction.domain2.TablePerClassDog</value>
                <value>com.hung.auction.domain2.Owner</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <!-- hibernate.transaction.factory_class can be JDBCTransactionFactory or JTATransactionFactory.  if not specified, then
                     it will default to JDBCTransactionFactory.  JTATransactionFactory is related to JTA in J2EE solution.  no need to use
                     it in plain spring-hibernate solution -->
                <prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
                <prop key="hibernate.dialect">${db.dialect}</prop>
                <!-- hibernate internal connection pooling algorithm is rudimentry.  it is recommended to use third party pool for best
                     performance.  just replace hibernate.connection.pool_size with specific setting will turn off hibernate internal pool -->
                <prop key="hibernate.connection.pool_size">10</prop>
        		<prop key="hibernate.connection.driver_class">${db.driver}</prop>
        		<prop key="hibernate.connection.url">${db.url}</prop>
        		<prop key="hibernate.connection.username">${db.username}</prop>
        	    <prop key="hibernate.connection.password">${db.password}</prop>
        	    <prop key="hibernate.connection.autocommit">true</prop>
        	    <prop key="hibernate.jdbc.batch_size">0</prop>
                <!-- specify cache provider settings to enable hibernate 2nd level cache -->
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <!--  automatically exports schema DDL to the database when the SessionFactory is created
                <prop key="hibernate.hbm2ddl.auto">true</prop>
                -->
                <!-- enable query cache -->
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <!-- 
                    1>Hibernate is using “thread” managed sessions. With this type of session management Hibernate manages the session for you. 
                      When you first attempt to use a session Hibernate will create one and attach it to your local thread. When you commit the 
                      transaction in the session Hibernate will automatically close the session meaning it can’t be reused.
                    2>“managed” sessions. With managed sessions you’re in full control of creating, flushing, commiting, and closing sessions. 
                    
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    1>Starting with version 3.0.1, Hibernate added the SessionFactory.getCurrentSession() method. Initially, this assumed 
                      usage of JTA transactions, where the JTA transaction defined both the scope and context of a current session. Given 
                      the maturity of the numerous stand-alone JTA TransactionManager implementations, most, if not all, applications 
                      should be using JTA transaction management, whether or not they are deployed into a J2EE container. Based on that, 
                      the JTA-based contextual sessions are all you need to use.
                    2>However, as of version 3.1, the processing behind SessionFactory.getCurrentSession() is now pluggable. To that end, 
                      a new extension interface, org.hibernate.context.CurrentSessionContext, and a new configuration parameter, 
                      hibernate.current_session_context_class, have been added to allow pluggability of the scope and context of 
                      defining current sessions.
                    3>See the Javadocs for the org.hibernate.context.CurrentSessionContext interface for a detailed discussion of its 
                      contract. It defines a single method, currentSession(), by which the implementation is responsible for tracking 
                      the current contextual session. Out-of-the-box, Hibernate comes with three implementations of this interface:

                      a>org.hibernate.context.JTASessionContext: current sessions are tracked and scoped by a JTA transaction. 
                        The processing here is exactly the same as in the older JTA-only approach. 
                      b>org.hibernate.context.ThreadLocalSessionContext:current sessions are tracked by thread of execution. 
                      c>org.hibernate.context.ManagedSessionContext: current sessions are tracked by thread of execution. However, 
                        you are responsible to bind and unbind a Session instance with static methods on this class: it does not 
                        open, flush, or close a Session.

                      The first two implementations provide a "one session - one database transaction" programming model. This is 
                      also known and used as session-per-request. The beginning and end of a Hibernate session is defined by the 
                      duration of a database transaction. If you use programmatic transaction demarcation in plain JSE without JTA, 
                      you are advised to use the Hibernate Transaction API to hide the underlying transaction system from your 
                      code. If you use JTA, you can utilize the JTA interfaces to demarcate transactions. If you execute in an 
                      EJB container that supports CMT, transaction boundaries are defined declaratively and you do not need any 
                      transaction or session demarcation operations in your code. 

                      The hibernate.current_session_context_class configuration parameter defines which org.hibernate.context.CurrentSessionContext 
                      implementation should be used. For backwards compatibility, if this configuration parameter is not set but a 
                      org.hibernate.transaction.TransactionManagerLookup is configured, Hibernate will use the org.hibernate.context.JTASessionContext. 
                      Typically, the value of this parameter would just name the implementation class to use. For the three out-of-the-box 
                      implementations, however, there are three corresponding short names: "jta", "thread", and "managed".
                      
                    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
                    1>When you create a hibernate session using any of the sessionFactory.openSession(...) methods the session factory 
                      will 'bind' the session to the current context. The default context is 'thread' which means the sesion factory 
                      will bind the session to the thread from which openSession(...) is called.
                    2>This is useful because you can later call sessionFactory.getCurrentSession() which will return the session that 
                      is bound to the currently running thread. 
                -->
                <prop key="hibernate.current_session_context_class">thread</prop>
            </props>
        </property>
    </bean>
    
    <bean id="domainDAO" class="com.hung.auction.dao.hibernate.HibernateDomainDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="domainUserDAO" class="com.hung.auction.dao.hibernate.HibernateDomainUserDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="documentDAO" class="com.hung.auction.dao.hibernate.HibernateDocumentDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="animalDAO" class="com.hung.auction.dao2.HibernateAnimalDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="sqlQueryDomainDAO" class="com.hung.auction.dao2.HibernateSQLQueryDomainDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="hqlQueryDomainDAO" class="com.hung.auction.dao2.HibernateHQLQueryDomainDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="criteriaQueryDomainDAO" class="com.hung.auction.dao2.HibernateCriteriaQueryDomainDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
 </beans>