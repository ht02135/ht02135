<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--
    mvc:annotation-driven (Enables the Spring MVC @Controller programming mode) and default following components
        1. DefaultAnnotationHandlerMapping - This is a HandlerMapping implementation which maps the HTTP requests to the handler methods defined using the @RequestMapping annotation.
        2. AnnotationMethodHandlerAdapter - It is responsible for scanning the controllers to identify methods (and parameters) annotated with @MVC annotations. It scans and caches handler methods annotated with @RequestMapping. Also handles the @RequestParam, @ModelAttribute, @SessionAttributes and @InitBinder annotations.
        3. ConfigurableWebBindingInitializer - The initializer for the Web Data Binder. Helps in declaratively configuring the Web Binder with validators, conversion services, property editors, etc.
        4. LocalValidatorFactoryBean - Implements the validator interface and enables JSR303 validation. This is injected into ConfigurableWebBindingInitializer.
        5. FormattingConversionServiceFactoryBean - A conversion factory that returns conversion services for basic objects like date and numbers. This factory is again injected into ConfigurableWebBindingInitializer.
        6. Message Converters
          * ByteArrayHttpMessageConverter - A HTTP request message converter that reads a HTTP message body and returns a byte stream. It can also read a byte stream and construct a response body. Used for receiving and sending documents like PDF, XLS, etc.
          * StringHttpMessageConverter - A HTTP request message converter that reads a plain text request body and binds it to a String object. And vice-versa with response.
          * FormHttpMessageConverter - A HTTP request message converter that reads a form encoded request body and binds it to a form Binding object.
          * SourceHttpMessageConverter - A HTTP request converter that converts a XML message body to/from Binding Object.
    -->
    <!-- comment out mvc:annotation-driven, because we manually define some components -->
    <!-- <mvc:annotation-driven/> -->

    <!--
    To enable @Autowired
        1. use context:annotation-config
        2. or register â€˜AutowiredAnnotationBeanPostProcessor
    -->
    <!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> -->
    <context:annotation-config />

    <!-- specifies from where to look for annotated components like @Repository, @Autowired -->
    <context:component-scan base-package="com.hung.auction" />

    <!-- ////////// Message Converter Setup ////////// -->

    <bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>com.hung.auction.jaxbdomain.JaxbClientSession</value>
                <value>com.hung.auction.jaxbdomain.JaxbDomain</value>
                <value>com.hung.auction.jaxbdomain.JaxbDomainUser</value>
                <value>com.hung.auction.jaxbdomain.JaxbSeller</value>
                <value>com.hung.auction.domain.Domain</value>
                <value>com.hung.auction.domain.DomainUser</value>
            </list>
        </property>
    </bean>

    <!-- Spring's built-in converter MarshallingHttpMessageConverter is used to map between an object and XML (OXM) -->
    <bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <property name="supportedMediaTypes" value="application/xml"/>
        <property name="marshaller" ref="jaxbMarshaller" />
        <property name="unmarshaller" ref="jaxbMarshaller" />
    </bean>

    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes" value="application/json" />
    </bean>
    
    <!-- ////////////////////// Interceptors ////////////////////////////////////// -->
    
    <bean id="loginInterceptor" class="com.hung.auction.interceptor.LoginInterceptor">
        <property name="redirectURL" value="/simple-restfulwebapp-module/auction/login"/>
    </bean>
    
    <!-- ////////////////////// Handler Mapping and Handler Adapter //////////////////////////////////// -->

    <!-- Spring contains following four implementation of HandlerMapping interface.
        BeanNameUrlHandlerMapping
        SimpleUrlHandlerMapping
        ControllerClassNameHandlerMapping
        CommonsPathMapHandlerMapping

        BeanNameUrlHandlerMapping is the simplest of all and DispatcherServlet looks for this mapping by default.
        DispatcherServlet will consult each one of them in the order according to their priority set by order property
    -->
     
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="0" />
        <property name="interceptors">
            <list>
                <ref bean="loginInterceptor" />
            </list>
        </property>
    </bean>

    <!-- need to define urlmapping for some of web services -->
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="order" value="1" />
        <property name="mappings">
            <value>
                /webservices/httpSellerServiceExporter=httpSellerServiceExporter
                /webservices/httpDomainServiceExporter=httpDomainServiceExporter
                /webservices/httpDomainUserServiceExporter=httpDomainUserServiceExporter
                /webservices/httpLoginServiceExporter=httpLoginServiceExporter
                /webservices/httpDomainSettingServiceExporter=httpDomainSettingServiceExporter
                /webservices/httpClientCacheServiceExporter=httpClientCacheServiceExporter
                /webservices/httpServerReservationServiceExporter=httpServerReservationServiceExporter
            </value>
        </property>
        <property name="interceptors">
            <list>
                <ref bean="loginInterceptor" />
            </list>
        </property>
    </bean>
    
    <!--
        Spring define these adapter, when you define any one of them, rest will not defined.
        org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
        org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
        org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
     -->
    
    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="marshallingHttpMessageConverter"/>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <!-- ////////// Resources ////////// -->

    <!-- new resources serving mechanism -->
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>domains</value>
                <value>domainUsers</value>
            </list>
        </property>
    </bean>

    <!-- ////////// Tile ////////// -->

    <!-- To use tile jspViews in MVC, need to register TilesViewResolver -->
    <!-- <bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"/> -->
    <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="order" value="0"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
    </bean>

    <!-- use TilesConfigurer to track Tile definition -->
    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/jspViews/tileDefs.xml</value>
                <value>/jspViews/domains/tileDefs.xml</value>
                <value>/jspViews/domainUsers/tileDefs.xml</value>
                <value>/jspViews/documents/tileDefs.xml</value>
                <value>/jspViews/searchdocuments/tileDefs.xml</value>
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />
            </map>
        </property>

        <property name="defaultViews">
            <list>
                <!-- JSON View -->
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                </bean>

                <!-- JAXB XML View -->
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <constructor-arg index="0" ref="jaxbMarshaller"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- ////////// JSTL ////////// -->

    <!-- Resolves jspViews selected for rendering by @Controllers to .jsp resources in the jspViews directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="2"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- Multipart
         multipartResolver bean â€“ We use Spring MVCs CommonsMultipartResolver. This resolver will resolve multipart form
         data such as file uploads from the request and make available File object to spring controller. Note that we have
         specified property maxUploadSize with value 10000000. This is the maximum limit of filesize which can be uploaded
         in our example.
    -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="10000000" />
    </bean>

</beans>
