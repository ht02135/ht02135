<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
  
<web-app id="Auction Web App" version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- need to declare web-app as least Servlet 2.4 for JSP EL to work -->

	<display-name>Auction Web App</display-name>

	<!-- Configure the contextConfigLocation and define your Springâ€™s bean configuration 
		file. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/application-context.xml</param-value>
	</context-param>

	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>

	<!-- JSF configuration -->
	<context-param>
		<param-name>javax.faces.CONFIG_FILES</param-name>
		<param-value>/WEB-INF/faces-config.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!-- Register ContextLoaderListener as the first listener to make your web 
		application aware of the Spring context loader -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- This listener is mainly for use with third-party servlets, e.g. the 
		JSF FacesServlet. Within Spring's own web support -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- My custom listener -->
	<listener>
		<listener-class>com.hung.auction.servlet.SessionCounterListener</listener-class>
	</listener>


	<!-- ////////// auction servlet ////////// -->
	<servlet>
		<servlet-name>auction</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- load this servlet at first -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>auction</servlet-name>
		<url-pattern>/auction/*</url-pattern>
	</servlet-mapping>

	<!-- ////////// mvc restful servlet ////////// -->
	<servlet>
		<servlet-name>mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- load this servlet at 2nd -->
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>mvc</servlet-name>
		<url-pattern>/mvc/*</url-pattern>
	</servlet-mapping>

	<!-- ////////// jersey restful servlet ////////// -->
	<servlet>
		<servlet-name>jersey</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<init-param>
			<!-- jersey look for web service classes in com.sun.jersey.config.property.packages 
				value -->
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>com.hung.auction.restfulresouce</param-value>
		</init-param>
		<init-param>
			<!-- enable support for JAXB-annotated types with application/xml, text/xml 
				and application/json formats -->
			<!-- for automatic mapping from JAXB annotated class to XML and JSON -->
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- load this servlet at 3rd -->
		<load-on-startup>3</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>jersey</servlet-name>
		<url-pattern>/jersey/*</url-pattern>
	</servlet-mapping>

	<!-- JSF mapping -->
	<servlet>
		<servlet-name>faces</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<!-- load this servlet at 4th -->
		<load-on-startup>4</load-on-startup>
	</servlet>
	<!-- Map these files with JSF -->
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>
	<!-- normally jsf files have the .faces extension so that the faces servlet 
		mapping can be configured to process all requests meeting that format. They 
		are basically .jsp pages renamed to .faces to determine which resources are 
		processed as jsf -->
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>*.faces</url-pattern>
	</servlet-mapping>
  
</web-app>
